---
- name: Backup MikroTik Routers with Identity-Based Naming
  hosts: mikrotik
  gather_facts: no
  vars:
    ssh_args: >-
      -o HostKeyAlgorithms=+ssh-dss,ssh-rsa
      -o KexAlgorithms=+diffie-hellman-group14-sha1
      -o StrictHostKeyChecking=no
    backup_dir: "/opt/mikrotik_backups"
    backup_retention_days: 30

  tasks:
    - name: Create backup directory
      ansible.builtin.file:
        path: "{{ backup_dir }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      run_once: true

    - name: Get MikroTik identity name
      ansible.builtin.command: >
        sshpass -p "{{ ansible_password }}" ssh {{ ssh_args }}
        {{ ansible_user }}@{{ ansible_host }} "/system identity print"
      delegate_to: localhost
      register: identity_output
      changed_when: false

    - name: Extract device name
      ansible.builtin.set_fact:
        device_name: "{{ identity_output.stdout_lines[0].split(':')[1] | trim }}"
      when: identity_output.rc == 0

    - name: Generate timestamp
      ansible.builtin.set_fact:
        backup_timestamp: "{{ lookup('pipe', 'date +%Y-%m-%d_%H-%M-%S') }}"

    - name: Set backup filename
      ansible.builtin.set_fact:
        backup_file: "{{ backup_dir }}/{{ device_name | default(ansible_host) }}_{{ backup_timestamp }}.rsc"
      delegate_to: localhost

    - name: Export configuration
      ansible.builtin.command: >
        sshpass -p "{{ ansible_password }}" ssh {{ ssh_args }}
        {{ ansible_user }}@{{ ansible_host }} "/export file={{ device_name | default(ansible_host) }}"
      delegate_to: localhost
      register: export_result

    - name: Download configuration
      ansible.builtin.command: >
        sshpass -p "{{ ansible_password }}" scp {{ ssh_args }}
        {{ ansible_user }}@{{ ansible_host }}:{{ device_name | default(ansible_host) }}.rsc "{{ backup_file }}"
      delegate_to: localhost
      when: export_result.rc == 0
      register: download_result

    - name: Verify backup
      ansible.builtin.stat:
        path: "{{ backup_file }}"
      delegate_to: localhost
      register: backup_verify

    - name: Cleanup remote export
      ansible.builtin.command: >
        sshpass -p "{{ ansible_password }}" ssh {{ ssh_args }}
        {{ ansible_user }}@{{ ansible_host }} "/file remove {{ device_name | default(ansible_host) }}.rsc"
      delegate_to: localhost
      when: export_result.rc == 0

    - name: Backup confirmation
      ansible.builtin.debug:
        msg: >
          Backup of {{ device_name | default(ansible_host) }}
          {% if backup_verify.stat.exists %}
          succeeded: {{ backup_file }} ({{ backup_verify.stat.size | filesizeformat }})
          {% else %}
          failed! Check connection/credentials.
          {% endif %}

    - name: Purge old backups
      ansible.builtin.find:
        paths: "{{ backup_dir }}"
        patterns: "{{ device_name | default(ansible_host) }}_*.rsc"
        age: "{{ backup_retention_days }}d"
      delegate_to: localhost
      register: old_backups

    - name: Remove expired backups
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      delegate_to: localhost
      loop: "{{ old_backups.files }}"
      when: old_backups.matched > 0
