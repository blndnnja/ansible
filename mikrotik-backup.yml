---
- name: Backup MikroTik Routers
  hosts: mikrotik
  gather_facts: no
  vars:
    ssh_args: >-
      -o HostKeyAlgorithms=+ssh-dss,ssh-rsa
      -o KexAlgorithms=+diffie-hellman-group14-sha1
      -o StrictHostKeyChecking=no
      -o ConnectTimeout=10
    backup_dir: "/opt/mikrotik_backups"
    backup_retention_days: 7

  tasks:
    - name: Verify connectivity
      ansible.builtin.command: >
        sshpass -p "{{ ansible_password }}" ssh {{ ssh_args }}
        {{ ansible_user }}@{{ ansible_host }} "/system resource print"
      delegate_to: localhost
      register: connection_test
      ignore_errors: yes
      changed_when: false

    - name: Create backup directory
      ansible.builtin.file:
        path: "{{ backup_dir }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      run_once: true

    - name: Get device identity
      ansible.builtin.command: >
        sshpass -p "{{ ansible_password }}" ssh {{ ssh_args }}
        {{ ansible_user }}@{{ ansible_host }} "/system identity print"
      delegate_to: localhost
      register: identity
      when: connection_test.rc == 0
      changed_when: false

    - name: Set backup filename
      ansible.builtin.set_fact:
        device_name: "{{ identity.stdout_lines[0].split(':')[1] | trim | regex_replace(' ', '_') }}"
        backup_file: "{{ backup_dir }}/{{ device_name }}_{{ lookup('pipe', 'date +%Y-%m-%d_%H%M%S') }}.rsc"
      when: connection_test.rc == 0
      delegate_to: localhost

    - name: Export configuration
      ansible.builtin.command: >
        sshpass -p "{{ ansible_password }}" ssh {{ ssh_args }}
        {{ ansible_user }}@{{ ansible_host }} "/export file={{ device_name }}"
      delegate_to: localhost
      when: connection_test.rc == 0
      register: export
      retries: 2
      delay: 5
      until: export.rc == 0

    - name: Download backup
      ansible.builtin.command: >
        sshpass -p "{{ ansible_password }}" scp {{ ssh_args }}
        {{ ansible_user }}@{{ ansible_host }}:{{ device_name }}.rsc "{{ backup_file }}"
      delegate_to: localhost
      when: export.rc == 0
      register: download

    - name: Cleanup remote file
      ansible.builtin.command: >
        sshpass -p "{{ ansible_password }}" ssh {{ ssh_args }}
        {{ ansible_user }}@{{ ansible_host }} "/file remove {{ device_name }}.rsc"
      delegate_to: localhost
      when: export.rc == 0
      ignore_errors: yes

    - name: Show backup status
      ansible.builtin.debug:
        msg: >
          {% if connection_test.rc != 0 %}
          {{ ansible_host }} - Connection failed!
          {% elif download.rc == 0 %}
          {{ device_name }} - Backup saved to {{ backup_file }}
          {% else %}
          {{ device_name }} - Backup failed during transfer
          {% endif %}
